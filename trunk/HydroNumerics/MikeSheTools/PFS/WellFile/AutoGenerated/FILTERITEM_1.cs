using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;
using HydroNumerics.MikeSheTools.PFS.SheFile;

namespace HydroNumerics.MikeSheTools.PFS.Well
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class FILTERITEM_1: PFSMapper
  {


    internal FILTERITEM_1(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "TIME_SERIES_FILE":
          TIME_SERIES_FILE = new TIME_SERIES_FILE(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }

    }

    public FILTERITEM_1(string pfsname)
    {
      _pfsHandle = new PFSSection(pfsname);

      _pfsHandle.AddKeyword(new PFSKeyword("Top", PFSParameterType.Double, 0));

      _pfsHandle.AddKeyword(new PFSKeyword("Bottom", PFSParameterType.Double, 0));

      _pfsHandle.AddKeyword(new PFSKeyword("AbstrUsed", PFSParameterType.Integer, 0));

      _pfsHandle.AddKeyword(new PFSKeyword("AbstrRedFactor", PFSParameterType.Integer, 0));

      _pfsHandle.AddKeyword(new PFSKeyword("Radius", PFSParameterType.Double, 0));

      _pfsHandle.AddKeyword(new PFSKeyword("Storage", PFSParameterType.Integer, 0));

      TIME_SERIES_FILE = new TIME_SERIES_FILE("TIME_SERIES_FILE" );
      _pfsHandle.AddSection(TIME_SERIES_FILE._pfsHandle);

    }

    public TIME_SERIES_FILE TIME_SERIES_FILE{get; private set;}

    public double Top
    {
      get
      {
        return _pfsHandle.GetKeyword("Top", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("Top", 1).GetParameter(1).Value = value;
      }
    }

    public double Bottom
    {
      get
      {
        return _pfsHandle.GetKeyword("Bottom", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("Bottom", 1).GetParameter(1).Value = value;
      }
    }

    public int AbstrUsed
    {
      get
      {
        return _pfsHandle.GetKeyword("AbstrUsed", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("AbstrUsed", 1).GetParameter(1).Value = value;
      }
    }

    public int AbstrRedFactor
    {
      get
      {
        return _pfsHandle.GetKeyword("AbstrRedFactor", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("AbstrRedFactor", 1).GetParameter(1).Value = value;
      }
    }

    public double Radius
    {
      get
      {
        return _pfsHandle.GetKeyword("Radius", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("Radius", 1).GetParameter(1).Value = value;
      }
    }

    public int Storage
    {
      get
      {
        return _pfsHandle.GetKeyword("Storage", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Storage", 1).GetParameter(1).Value = value;
      }
    }

  }
}
