//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace SilverlightApplication1.ServiceReference2 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Well", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.Tools")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference2.JupiterWell))]
    public partial class Well : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string IDField;
        
        private double TerrainField;
        
        private double XField;
        
        private double YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Terrain {
            get {
                return this.TerrainField;
            }
            set {
                if ((this.TerrainField.Equals(value) != true)) {
                    this.TerrainField = value;
                    this.RaisePropertyChanged("Terrain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JupiterWell", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.JupiterTools")]
    public partial class JupiterWell : SilverlightApplication1.ServiceReference2.Well {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.ChemistrySample> ChemSamplesField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.JupiterIntake> IntakesAField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.Lithology> LithSamplesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.ChemistrySample> ChemSamples {
            get {
                return this.ChemSamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChemSamplesField, value) != true)) {
                    this.ChemSamplesField = value;
                    this.RaisePropertyChanged("ChemSamples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.JupiterIntake> IntakesA {
            get {
                return this.IntakesAField;
            }
            set {
                if ((object.ReferenceEquals(this.IntakesAField, value) != true)) {
                    this.IntakesAField = value;
                    this.RaisePropertyChanged("IntakesA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.Lithology> LithSamples {
            get {
                return this.LithSamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.LithSamplesField, value) != true)) {
                    this.LithSamplesField = value;
                    this.RaisePropertyChanged("LithSamples");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChemistrySample", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.JupiterTools")]
    public partial class ChemistrySample : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountField;
        
        private string CompoundNameField;
        
        private int CompoundNoField;
        
        private System.DateTime SampleDateField;
        
        private int SampleIDField;
        
        private int UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompoundName {
            get {
                return this.CompoundNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompoundNameField, value) != true)) {
                    this.CompoundNameField = value;
                    this.RaisePropertyChanged("CompoundName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompoundNo {
            get {
                return this.CompoundNoField;
            }
            set {
                if ((this.CompoundNoField.Equals(value) != true)) {
                    this.CompoundNoField = value;
                    this.RaisePropertyChanged("CompoundNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SampleDate {
            get {
                return this.SampleDateField;
            }
            set {
                if ((this.SampleDateField.Equals(value) != true)) {
                    this.SampleDateField = value;
                    this.RaisePropertyChanged("SampleDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SampleID {
            get {
                return this.SampleIDField;
            }
            set {
                if ((this.SampleIDField.Equals(value) != true)) {
                    this.SampleIDField = value;
                    this.RaisePropertyChanged("SampleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JupiterIntake", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.JupiterTools")]
    public partial class JupiterIntake : SilverlightApplication1.ServiceReference2.Intake {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.ObservationEntry> ObservationsForWebField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.Screen> ScreensForWebField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.ObservationEntry> ObservationsForWeb {
            get {
                return this.ObservationsForWebField;
            }
            set {
                if ((object.ReferenceEquals(this.ObservationsForWebField, value) != true)) {
                    this.ObservationsForWebField = value;
                    this.RaisePropertyChanged("ObservationsForWeb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication1.ServiceReference2.Screen> ScreensForWeb {
            get {
                return this.ScreensForWebField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreensForWebField, value) != true)) {
                    this.ScreensForWebField = value;
                    this.RaisePropertyChanged("ScreensForWeb");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lithology", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.JupiterTools")]
    public partial class Lithology : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double BottomField;
        
        private string RockSymbolField;
        
        private string RockTypeField;
        
        private double TopField;
        
        private string TotalDescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bottom {
            get {
                return this.BottomField;
            }
            set {
                if ((this.BottomField.Equals(value) != true)) {
                    this.BottomField = value;
                    this.RaisePropertyChanged("Bottom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RockSymbol {
            get {
                return this.RockSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.RockSymbolField, value) != true)) {
                    this.RockSymbolField = value;
                    this.RaisePropertyChanged("RockSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RockType {
            get {
                return this.RockTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RockTypeField, value) != true)) {
                    this.RockTypeField = value;
                    this.RaisePropertyChanged("RockType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Top {
            get {
                return this.TopField;
            }
            set {
                if ((this.TopField.Equals(value) != true)) {
                    this.TopField = value;
                    this.RaisePropertyChanged("Top");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalDescription {
            get {
                return this.TotalDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalDescriptionField, value) != true)) {
                    this.TotalDescriptionField = value;
                    this.RaisePropertyChanged("TotalDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Intake", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.Tools")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference2.JupiterIntake))]
    public partial class Intake : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDNumber {
            get {
                return this.IDNumberField;
            }
            set {
                if ((this.IDNumberField.Equals(value) != true)) {
                    this.IDNumberField = value;
                    this.RaisePropertyChanged("IDNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObservationEntry", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.Tools")]
    public partial class ObservationEntry : SilverlightApplication1.ServiceReference2.TimeSeriesEntry {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Screen", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.Tools")]
    public partial class Screen : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double DepthToBottomField;
        
        private double DepthToTopField;
        
        private int NumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DepthToBottom {
            get {
                return this.DepthToBottomField;
            }
            set {
                if ((this.DepthToBottomField.Equals(value) != true)) {
                    this.DepthToBottomField = value;
                    this.RaisePropertyChanged("DepthToBottom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DepthToTop {
            get {
                return this.DepthToTopField;
            }
            set {
                if ((this.DepthToTopField.Equals(value) != true)) {
                    this.DepthToTopField = value;
                    this.RaisePropertyChanged("DepthToTop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeriesEntry", Namespace="http://schemas.datacontract.org/2004/07/MikeSheWrapper.Tools")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SilverlightApplication1.ServiceReference2.ObservationEntry))]
    public partial class TimeSeriesEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime TimeField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference2.WellWrapper")]
    public interface WellWrapper {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:WellWrapper/GetX", ReplyAction="urn:WellWrapper/GetXResponse")]
        System.IAsyncResult BeginGetX(System.AsyncCallback callback, object asyncState);
        
        SilverlightApplication1.ServiceReference2.JupiterWell EndGetX(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WellWrapperChannel : SilverlightApplication1.ServiceReference2.WellWrapper, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightApplication1.ServiceReference2.JupiterWell Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightApplication1.ServiceReference2.JupiterWell)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WellWrapperClient : System.ServiceModel.ClientBase<SilverlightApplication1.ServiceReference2.WellWrapper>, SilverlightApplication1.ServiceReference2.WellWrapper {
        
        private BeginOperationDelegate onBeginGetXDelegate;
        
        private EndOperationDelegate onEndGetXDelegate;
        
        private System.Threading.SendOrPostCallback onGetXCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WellWrapperClient() {
        }
        
        public WellWrapperClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WellWrapperClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WellWrapperClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WellWrapperClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetXCompletedEventArgs> GetXCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication1.ServiceReference2.WellWrapper.BeginGetX(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetX(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightApplication1.ServiceReference2.JupiterWell SilverlightApplication1.ServiceReference2.WellWrapper.EndGetX(System.IAsyncResult result) {
            return base.Channel.EndGetX(result);
        }
        
        private System.IAsyncResult OnBeginGetX(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication1.ServiceReference2.WellWrapper)(this)).BeginGetX(callback, asyncState);
        }
        
        private object[] OnEndGetX(System.IAsyncResult result) {
            SilverlightApplication1.ServiceReference2.JupiterWell retVal = ((SilverlightApplication1.ServiceReference2.WellWrapper)(this)).EndGetX(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXCompleted(object state) {
            if ((this.GetXCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXCompleted(this, new GetXCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXAsync() {
            this.GetXAsync(null);
        }
        
        public void GetXAsync(object userState) {
            if ((this.onBeginGetXDelegate == null)) {
                this.onBeginGetXDelegate = new BeginOperationDelegate(this.OnBeginGetX);
            }
            if ((this.onEndGetXDelegate == null)) {
                this.onEndGetXDelegate = new EndOperationDelegate(this.OnEndGetX);
            }
            if ((this.onGetXCompletedDelegate == null)) {
                this.onGetXCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXCompleted);
            }
            base.InvokeAsync(this.onBeginGetXDelegate, null, this.onEndGetXDelegate, this.onGetXCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightApplication1.ServiceReference2.WellWrapper CreateChannel() {
            return new WellWrapperClientChannel(this);
        }
        
        private class WellWrapperClientChannel : ChannelBase<SilverlightApplication1.ServiceReference2.WellWrapper>, SilverlightApplication1.ServiceReference2.WellWrapper {
            
            public WellWrapperClientChannel(System.ServiceModel.ClientBase<SilverlightApplication1.ServiceReference2.WellWrapper> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetX(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetX", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightApplication1.ServiceReference2.JupiterWell EndGetX(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightApplication1.ServiceReference2.JupiterWell _result = ((SilverlightApplication1.ServiceReference2.JupiterWell)(base.EndInvoke("GetX", _args, result)));
                return _result;
            }
        }
    }
}
