using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;
using HydroNumerics.MikeSheTools.PFS.SheFile;

namespace HydroNumerics.MikeSheTools.PFS.MEX
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public class MexFile: PFSFile
  {

    private MOUSE_NODES _mOUSE_NODES;
    private MOUSE_HEADLOSS_PARAMETERS _mOUSE_HEADLOSS_PARAMETERS;
    private MOUSE_LINKS _mOUSE_LINKS;
    private MOUSE_MATERIAL_PARAMETERS _mOUSE_MATERIAL_PARAMETERS;
    private MOUSE_WEIRS _mOUSE_WEIRS;
    private MOUSE_PUMPS _mOUSE_PUMPS;
    private MOUSE_CROSS_SECTIONS _mOUSE_CROSS_SECTIONS;
    private MOUSE_TABULAR_DATA _mOUSE_TABULAR_DATA;
    private MOUSE_PASSIVE_CONTROL _mOUSE_PASSIVE_CONTROL;
    private MOUSE_Catchments _mOUSE_Catchments;
    private MOUSE_RDII _mOUSE_RDII;
    private CALIBRATION_SPECIFICATION _cALIBRATION_SPECIFICATION;
    private MOUSE_Computation _mOUSE_Computation;
    private MSM_BITEM _mSM_BITEM;
    private MSM_BBOUNDARY _mSM_BBOUNDARY;
    private MOUSE_RTC_SENSORS _mOUSE_RTC_SENSORS;
    private MOUSE_T_Results _mOUSE_T_Results;
    private INITIAL_CONDITION_SELECTION _iNITIAL_CONDITION_SELECTION;
    private COMPUTATIONAL_ENGINE_CONTROL _cOMPUTATIONAL_ENGINE_CONTROL;
    private msm_SRQ _msm_SRQ;
    private msm_ADDispersion _msm_ADDispersion;
    private msm_ST _msm_ST;
    private msm_WQProcess _msm_WQProcess;
    protected List<string> _unMappedSections = new List<string>();

    protected List<string> UnMappedSections
    {
      get { return _unMappedSections; }
    }



    public MexFile(string MexFileName):base(MexFileName)
    {
      for (int i = 1; i <=_pfsClass.GetTargetsNo(); i++)
      {
        PFSSection sub = _pfsClass.GetTarget(i);
        switch (sub.Name)
        {
        case "MOUSE_NODES":
          _mOUSE_NODES = new MOUSE_NODES(sub);
          break;
        case "MOUSE_HEADLOSS_PARAMETERS":
          _mOUSE_HEADLOSS_PARAMETERS = new MOUSE_HEADLOSS_PARAMETERS(sub);
          break;
        case "MOUSE_LINKS":
          _mOUSE_LINKS = new MOUSE_LINKS(sub);
          break;
        case "MOUSE_MATERIAL_PARAMETERS":
          _mOUSE_MATERIAL_PARAMETERS = new MOUSE_MATERIAL_PARAMETERS(sub);
          break;
        case "MOUSE_WEIRS":
          _mOUSE_WEIRS = new MOUSE_WEIRS(sub);
          break;
        case "MOUSE_PUMPS":
          _mOUSE_PUMPS = new MOUSE_PUMPS(sub);
          break;
        case "MOUSE_CROSS_SECTIONS":
          _mOUSE_CROSS_SECTIONS = new MOUSE_CROSS_SECTIONS(sub);
          break;
        case "MOUSE_TABULAR_DATA":
          _mOUSE_TABULAR_DATA = new MOUSE_TABULAR_DATA(sub);
          break;
        case "MOUSE_PASSIVE_CONTROL":
          _mOUSE_PASSIVE_CONTROL = new MOUSE_PASSIVE_CONTROL(sub);
          break;
        case "MOUSE_Catchments":
          _mOUSE_Catchments = new MOUSE_Catchments(sub);
          break;
        case "MOUSE_RDII":
          _mOUSE_RDII = new MOUSE_RDII(sub);
          break;
        case "CALIBRATION_SPECIFICATION":
          _cALIBRATION_SPECIFICATION = new CALIBRATION_SPECIFICATION(sub);
          break;
        case "MOUSE_Computation":
          _mOUSE_Computation = new MOUSE_Computation(sub);
          break;
        case "MSM_BITEM":
          _mSM_BITEM = new MSM_BITEM(sub);
          break;
        case "MSM_BBOUNDARY":
          _mSM_BBOUNDARY = new MSM_BBOUNDARY(sub);
          break;
        case "MOUSE_RTC_SENSORS":
          _mOUSE_RTC_SENSORS = new MOUSE_RTC_SENSORS(sub);
          break;
        case "MOUSE_T_Results":
          _mOUSE_T_Results = new MOUSE_T_Results(sub);
          break;
        case "INITIAL_CONDITION_SELECTION":
          _iNITIAL_CONDITION_SELECTION = new INITIAL_CONDITION_SELECTION(sub);
          break;
        case "COMPUTATIONAL_ENGINE_CONTROL":
          _cOMPUTATIONAL_ENGINE_CONTROL = new COMPUTATIONAL_ENGINE_CONTROL(sub);
          break;
        case "msm_SRQ":
          _msm_SRQ = new msm_SRQ(sub);
          break;
        case "msm_ADDispersion":
          _msm_ADDispersion = new msm_ADDispersion(sub);
          break;
        case "msm_ST":
          _msm_ST = new msm_ST(sub);
          break;
        case "msm_WQProcess":
          _msm_WQProcess = new msm_WQProcess(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public MOUSE_NODES MOUSE_NODES
    {
     get { return _mOUSE_NODES; }
    }

    public MOUSE_HEADLOSS_PARAMETERS MOUSE_HEADLOSS_PARAMETERS
    {
     get { return _mOUSE_HEADLOSS_PARAMETERS; }
    }

    public MOUSE_LINKS MOUSE_LINKS
    {
     get { return _mOUSE_LINKS; }
    }

    public MOUSE_MATERIAL_PARAMETERS MOUSE_MATERIAL_PARAMETERS
    {
     get { return _mOUSE_MATERIAL_PARAMETERS; }
    }

    public MOUSE_WEIRS MOUSE_WEIRS
    {
     get { return _mOUSE_WEIRS; }
    }

    public MOUSE_PUMPS MOUSE_PUMPS
    {
     get { return _mOUSE_PUMPS; }
    }

    public MOUSE_CROSS_SECTIONS MOUSE_CROSS_SECTIONS
    {
     get { return _mOUSE_CROSS_SECTIONS; }
    }

    public MOUSE_TABULAR_DATA MOUSE_TABULAR_DATA
    {
     get { return _mOUSE_TABULAR_DATA; }
    }

    public MOUSE_PASSIVE_CONTROL MOUSE_PASSIVE_CONTROL
    {
     get { return _mOUSE_PASSIVE_CONTROL; }
    }

    public MOUSE_Catchments MOUSE_Catchments
    {
     get { return _mOUSE_Catchments; }
    }

    public MOUSE_RDII MOUSE_RDII
    {
     get { return _mOUSE_RDII; }
    }

    public CALIBRATION_SPECIFICATION CALIBRATION_SPECIFICATION
    {
     get { return _cALIBRATION_SPECIFICATION; }
    }

    public MOUSE_Computation MOUSE_Computation
    {
     get { return _mOUSE_Computation; }
    }

    public MSM_BITEM MSM_BITEM
    {
     get { return _mSM_BITEM; }
    }

    public MSM_BBOUNDARY MSM_BBOUNDARY
    {
     get { return _mSM_BBOUNDARY; }
    }

    public MOUSE_RTC_SENSORS MOUSE_RTC_SENSORS
    {
     get { return _mOUSE_RTC_SENSORS; }
    }

    public MOUSE_T_Results MOUSE_T_Results
    {
     get { return _mOUSE_T_Results; }
    }

    public INITIAL_CONDITION_SELECTION INITIAL_CONDITION_SELECTION
    {
     get { return _iNITIAL_CONDITION_SELECTION; }
    }

    public COMPUTATIONAL_ENGINE_CONTROL COMPUTATIONAL_ENGINE_CONTROL
    {
     get { return _cOMPUTATIONAL_ENGINE_CONTROL; }
    }

    public msm_SRQ msm_SRQ
    {
     get { return _msm_SRQ; }
    }

    public msm_ADDispersion msm_ADDispersion
    {
     get { return _msm_ADDispersion; }
    }

    public msm_ST msm_ST
    {
     get { return _msm_ST; }
    }

    public msm_WQProcess msm_WQProcess
    {
     get { return _msm_WQProcess; }
    }

  }
}
