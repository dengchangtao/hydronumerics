//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HydroNumerics.MikeSheTools.Mike11View.Logger {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coordinate", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.CsPoint))]
    public partial class Coordinate : HydroNumerics.MikeSheTools.Mike11View.Logger.NotifyModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double M {
            get {
                return this.MField;
            }
            set {
                if ((this.MField.Equals(value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotifyModel", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Station))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.PolyLine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate))]
    public partial class NotifyModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseViewModel", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Station))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.PolyLine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile))]
    public partial class BaseViewModel : HydroNumerics.MikeSheTools.Mike11View.Logger.NotifyModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDirtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDirty {
            get {
                return this.IsDirtyField;
            }
            set {
                if ((this.IsDirtyField.Equals(value) != true)) {
                    this.IsDirtyField = value;
                    this.RaisePropertyChanged("IsDirty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class Station : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor[] SensorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UniqueIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryStatus {
            get {
                return this.BatteryStatusField;
            }
            set {
                if ((this.BatteryStatusField.Equals(value) != true)) {
                    this.BatteryStatusField = value;
                    this.RaisePropertyChanged("BatteryStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor[] Sensors {
            get {
                return this.SensorsField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorsField, value) != true)) {
                    this.SensorsField = value;
                    this.RaisePropertyChanged("Sensors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UniqueID {
            get {
                return this.UniqueIDField;
            }
            set {
                if ((this.UniqueIDField.Equals(value) != true)) {
                    this.UniqueIDField = value;
                    this.RaisePropertyChanged("UniqueID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sensor", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class Sensor : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] HeightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SensorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UniqueIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryStatus {
            get {
                return this.BatteryStatusField;
            }
            set {
                if ((this.BatteryStatusField.Equals(value) != true)) {
                    this.BatteryStatusField = value;
                    this.RaisePropertyChanged("BatteryStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] Heights {
            get {
                return this.HeightsField;
            }
            set {
                if ((object.ReferenceEquals(this.HeightsField, value) != true)) {
                    this.HeightsField = value;
                    this.RaisePropertyChanged("Heights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SensorType {
            get {
                return this.SensorTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorTypeField, value) != true)) {
                    this.SensorTypeField = value;
                    this.RaisePropertyChanged("SensorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UniqueID {
            get {
                return this.UniqueIDField;
            }
            set {
                if ((this.UniqueIDField.Equals(value) != true)) {
                    this.UniqueIDField = value;
                    this.RaisePropertyChanged("UniqueID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeStampValue", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class TimeStampValue : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSpanValue", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class TimeSpanValue : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PolyLine", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon))]
    public partial class PolyLine : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] CoordinatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] Coordinates {
            get {
                return this.CoordinatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesField, value) != true)) {
                    this.CoordinatesField = value;
                    this.RaisePropertyChanged("Coordinates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Polygon", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class Polygon : HydroNumerics.MikeSheTools.Mike11View.Logger.PolyLine {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrossSection", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class CrossSection : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChainageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.PolyLine ExtentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MeasurementTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.CsPoint[] PointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Chainage {
            get {
                return this.ChainageField;
            }
            set {
                if ((this.ChainageField.Equals(value) != true)) {
                    this.ChainageField = value;
                    this.RaisePropertyChanged("Chainage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.PolyLine Extent {
            get {
                return this.ExtentField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtentField, value) != true)) {
                    this.ExtentField = value;
                    this.RaisePropertyChanged("Extent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MeasurementTime {
            get {
                return this.MeasurementTimeField;
            }
            set {
                if ((this.MeasurementTimeField.Equals(value) != true)) {
                    this.MeasurementTimeField = value;
                    this.RaisePropertyChanged("MeasurementTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.CsPoint[] Points {
            get {
                return this.PointsField;
            }
            set {
                if ((object.ReferenceEquals(this.PointsField, value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShapeFile", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class ShapeFile : HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon[] GeometriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon[] Geometries {
            get {
                return this.GeometriesField;
            }
            set {
                if ((object.ReferenceEquals(this.GeometriesField, value) != true)) {
                    this.GeometriesField = value;
                    this.RaisePropertyChanged("Geometries");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataSegmentSpan", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class DataSegmentSpan : HydroNumerics.MikeSheTools.Mike11View.Logger.NotifyModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SegmentNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel ZoomLevelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SegmentNumber {
            get {
                return this.SegmentNumberField;
            }
            set {
                if ((this.SegmentNumberField.Equals(value) != true)) {
                    this.SegmentNumberField = value;
                    this.RaisePropertyChanged("SegmentNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.BaseViewModel ZoomLevel {
            get {
                return this.ZoomLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoomLevelField, value) != true)) {
                    this.ZoomLevelField = value;
                    this.RaisePropertyChanged("ZoomLevel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataSegment", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class DataSegment : HydroNumerics.MikeSheTools.Mike11View.Logger.NotifyModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SegmentNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZoomLevelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SegmentNumber {
            get {
                return this.SegmentNumberField;
            }
            set {
                if ((this.SegmentNumberField.Equals(value) != true)) {
                    this.SegmentNumberField = value;
                    this.RaisePropertyChanged("SegmentNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZoomLevel {
            get {
                return this.ZoomLevelField;
            }
            set {
                if ((this.ZoomLevelField.Equals(value) != true)) {
                    this.ZoomLevelField = value;
                    this.RaisePropertyChanged("ZoomLevel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CsPoint", Namespace="http://schemas.datacontract.org/2004/07/JacobGudbjerg.CommonCode")]
    [System.SerializableAttribute()]
    public partial class CsPoint : HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RelativeXField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RelativeX {
            get {
                return this.RelativeXField;
            }
            set {
                if ((this.RelativeXField.Equals(value) != true)) {
                    this.RelativeXField = value;
                    this.RaisePropertyChanged("RelativeX");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoggerPageConfig", Namespace="http://schemas.datacontract.org/2004/07/HydroInform.WebServices")]
    [System.SerializableAttribute()]
    public partial class LoggerPageConfig : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, int> LoggerIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MapCenterLatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MapCenterLongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MapZoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] RainGaugeIDSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HydroNumerics.MikeSheTools.Mike11View.Logger.WMSServerAddress[] WmsServersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, int> LoggerIDs {
            get {
                return this.LoggerIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.LoggerIDsField, value) != true)) {
                    this.LoggerIDsField = value;
                    this.RaisePropertyChanged("LoggerIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MapCenterLatitude {
            get {
                return this.MapCenterLatitudeField;
            }
            set {
                if ((this.MapCenterLatitudeField.Equals(value) != true)) {
                    this.MapCenterLatitudeField = value;
                    this.RaisePropertyChanged("MapCenterLatitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MapCenterLongitude {
            get {
                return this.MapCenterLongitudeField;
            }
            set {
                if ((this.MapCenterLongitudeField.Equals(value) != true)) {
                    this.MapCenterLongitudeField = value;
                    this.RaisePropertyChanged("MapCenterLongitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MapZoom {
            get {
                return this.MapZoomField;
            }
            set {
                if ((this.MapZoomField.Equals(value) != true)) {
                    this.MapZoomField = value;
                    this.RaisePropertyChanged("MapZoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] RainGaugeIDS {
            get {
                return this.RainGaugeIDSField;
            }
            set {
                if ((object.ReferenceEquals(this.RainGaugeIDSField, value) != true)) {
                    this.RainGaugeIDSField = value;
                    this.RaisePropertyChanged("RainGaugeIDS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.WMSServerAddress[] WmsServers {
            get {
                return this.WmsServersField;
            }
            set {
                if ((object.ReferenceEquals(this.WmsServersField, value) != true)) {
                    this.WmsServersField = value;
                    this.RaisePropertyChanged("WmsServers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WMSServerAddress", Namespace="http://schemas.datacontract.org/2004/07/HydroInform.WebServices")]
    [System.SerializableAttribute()]
    public partial class WMSServerAddress : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MapServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinZoomLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Layers {
            get {
                return this.LayersField;
            }
            set {
                if ((object.ReferenceEquals(this.LayersField, value) != true)) {
                    this.LayersField = value;
                    this.RaisePropertyChanged("Layers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapServer {
            get {
                return this.MapServerField;
            }
            set {
                if ((object.ReferenceEquals(this.MapServerField, value) != true)) {
                    this.MapServerField = value;
                    this.RaisePropertyChanged("MapServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinZoomLevel {
            get {
                return this.MinZoomLevelField;
            }
            set {
                if ((this.MinZoomLevelField.Equals(value) != true)) {
                    this.MinZoomLevelField = value;
                    this.RaisePropertyChanged("MinZoomLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Logger.LoggerData")]
    public interface LoggerData {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetHeight", ReplyAction="urn:LoggerData/GetHeightResponse")]
        System.Nullable<double> GetHeight(double Latitude, double Longitude);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetHeight", ReplyAction="urn:LoggerData/GetHeightResponse")]
        System.IAsyncResult BeginGetHeight(double Latitude, double Longitude, System.AsyncCallback callback, object asyncState);
        
        System.Nullable<double> EndGetHeight(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/PostNumberBoundary", ReplyAction="urn:LoggerData/PostNumberBoundaryResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] PostNumberBoundary(int PostalNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/PostNumberBoundary", ReplyAction="urn:LoggerData/PostNumberBoundaryResponse")]
        System.IAsyncResult BeginPostNumberBoundary(int PostalNumber, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] EndPostNumberBoundary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetStationsFromOrbicon", ReplyAction="urn:LoggerData/GetStationsFromOrbiconResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] GetStationsFromOrbicon();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetStationsFromOrbicon", ReplyAction="urn:LoggerData/GetStationsFromOrbiconResponse")]
        System.IAsyncResult BeginGetStationsFromOrbicon(System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] EndGetStationsFromOrbicon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetConfig", ReplyAction="urn:LoggerData/GetConfigResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig GetConfig(int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetConfig", ReplyAction="urn:LoggerData/GetConfigResponse")]
        System.IAsyncResult BeginGetConfig(int PageNumber, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig EndGetConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetStation", ReplyAction="urn:LoggerData/GetStationResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.Station GetStation(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetStation", ReplyAction="urn:LoggerData/GetStationResponse")]
        System.IAsyncResult BeginGetStation(int id, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.Station EndGetStation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetTimeSpanSeriesDefinition", ReplyAction="urn:LoggerData/GetTimeSpanSeriesDefinitionResponse")]
        System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> GetTimeSpanSeriesDefinition(int sensorid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetTimeSpanSeriesDefinition", ReplyAction="urn:LoggerData/GetTimeSpanSeriesDefinitionResponse")]
        System.IAsyncResult BeginGetTimeSpanSeriesDefinition(int sensorid, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> EndGetTimeSpanSeriesDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetTimeSpanSeriesSegment", ReplyAction="urn:LoggerData/GetTimeSpanSeriesSegmentResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetTimeSpanSeriesSegment(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetTimeSpanSeriesSegment", ReplyAction="urn:LoggerData/GetTimeSpanSeriesSegmentResponse")]
        System.IAsyncResult BeginGetTimeSpanSeriesSegment(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetTimeSpanSeriesSegment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetGridBlock", ReplyAction="urn:LoggerData/GetGridBlockResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon GetGridBlock(int GridBlockId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetGridBlock", ReplyAction="urn:LoggerData/GetGridBlockResponse")]
        System.IAsyncResult BeginGetGridBlock(int GridBlockId, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon EndGetGridBlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetGridTimeSpanSeriesDefinition", ReplyAction="urn:LoggerData/GetGridTimeSpanSeriesDefinitionResponse")]
        System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> GetGridTimeSpanSeriesDefinition(int gridid, int gridblockid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetGridTimeSpanSeriesDefinition", ReplyAction="urn:LoggerData/GetGridTimeSpanSeriesDefinitionResponse")]
        System.IAsyncResult BeginGetGridTimeSpanSeriesDefinition(int gridid, int gridblockid, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> EndGetGridTimeSpanSeriesDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetGridTimeSpanSeriesSegment", ReplyAction="urn:LoggerData/GetGridTimeSpanSeriesSegmentResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetGridTimeSpanSeriesSegment(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetGridTimeSpanSeriesSegment", ReplyAction="urn:LoggerData/GetGridTimeSpanSeriesSegmentResponse")]
        System.IAsyncResult BeginGetGridTimeSpanSeriesSegment(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetGridTimeSpanSeriesSegment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetTimeSeriesAtlevel", ReplyAction="urn:LoggerData/GetTimeSeriesAtlevelResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] GetTimeSeriesAtlevel(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetTimeSeriesAtlevel", ReplyAction="urn:LoggerData/GetTimeSeriesAtlevelResponse")]
        System.IAsyncResult BeginGetTimeSeriesAtlevel(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] EndGetTimeSeriesAtlevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetTimeSeriesDefinition", ReplyAction="urn:LoggerData/GetTimeSeriesDefinitionResponse")]
        System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> GetTimeSeriesDefinition(int sensorid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetTimeSeriesDefinition", ReplyAction="urn:LoggerData/GetTimeSeriesDefinitionResponse")]
        System.IAsyncResult BeginGetTimeSeriesDefinition(int sensorid, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> EndGetTimeSeriesDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetTimeSeries", ReplyAction="urn:LoggerData/GetTimeSeriesResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] GetTimeSeries(int UniqueSensorid, int NumberOfDecimals);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetTimeSeries", ReplyAction="urn:LoggerData/GetTimeSeriesResponse")]
        System.IAsyncResult BeginGetTimeSeries(int UniqueSensorid, int NumberOfDecimals, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] EndGetTimeSeries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetRainData", ReplyAction="urn:LoggerData/GetRainDataResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetRainData(int UniqueSensorID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetRainData", ReplyAction="urn:LoggerData/GetRainDataResponse")]
        System.IAsyncResult BeginGetRainData(int UniqueSensorID, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetRainData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetCrossSection", ReplyAction="urn:LoggerData/GetCrossSectionResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection GetCrossSection(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetCrossSection", ReplyAction="urn:LoggerData/GetCrossSectionResponse")]
        System.IAsyncResult BeginGetCrossSection(int id, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection EndGetCrossSection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetSensor", ReplyAction="urn:LoggerData/GetSensorResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor GetSensor(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetSensor", ReplyAction="urn:LoggerData/GetSensorResponse")]
        System.IAsyncResult BeginGetSensor(int id, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor EndGetSensor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:LoggerData/GetShapes", ReplyAction="urn:LoggerData/GetShapesResponse")]
        HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile GetShapes(int shapefileid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggerData/GetShapes", ReplyAction="urn:LoggerData/GetShapesResponse")]
        System.IAsyncResult BeginGetShapes(int shapefileid, System.AsyncCallback callback, object asyncState);
        
        HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile EndGetShapes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LoggerDataChannel : HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHeightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHeightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<double> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostNumberBoundaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostNumberBoundaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStationsFromOrbiconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStationsFromOrbiconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.Station[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.Station)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeSpanSeriesDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeSpanSeriesDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeSpanSeriesSegmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeSpanSeriesSegmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGridBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGridBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGridTimeSpanSeriesDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGridTimeSpanSeriesDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGridTimeSpanSeriesSegmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGridTimeSpanSeriesSegmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeSeriesAtlevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeSeriesAtlevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeSeriesDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeSeriesDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRainDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRainDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCrossSectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCrossSectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSensorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSensorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetShapesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetShapesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggerDataClient : System.ServiceModel.ClientBase<HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerData>, HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerData {
        
        private BeginOperationDelegate onBeginGetHeightDelegate;
        
        private EndOperationDelegate onEndGetHeightDelegate;
        
        private System.Threading.SendOrPostCallback onGetHeightCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostNumberBoundaryDelegate;
        
        private EndOperationDelegate onEndPostNumberBoundaryDelegate;
        
        private System.Threading.SendOrPostCallback onPostNumberBoundaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStationsFromOrbiconDelegate;
        
        private EndOperationDelegate onEndGetStationsFromOrbiconDelegate;
        
        private System.Threading.SendOrPostCallback onGetStationsFromOrbiconCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfigDelegate;
        
        private EndOperationDelegate onEndGetConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStationDelegate;
        
        private EndOperationDelegate onEndGetStationDelegate;
        
        private System.Threading.SendOrPostCallback onGetStationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeSpanSeriesDefinitionDelegate;
        
        private EndOperationDelegate onEndGetTimeSpanSeriesDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeSpanSeriesDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeSpanSeriesSegmentDelegate;
        
        private EndOperationDelegate onEndGetTimeSpanSeriesSegmentDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeSpanSeriesSegmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGridBlockDelegate;
        
        private EndOperationDelegate onEndGetGridBlockDelegate;
        
        private System.Threading.SendOrPostCallback onGetGridBlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGridTimeSpanSeriesDefinitionDelegate;
        
        private EndOperationDelegate onEndGetGridTimeSpanSeriesDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onGetGridTimeSpanSeriesDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGridTimeSpanSeriesSegmentDelegate;
        
        private EndOperationDelegate onEndGetGridTimeSpanSeriesSegmentDelegate;
        
        private System.Threading.SendOrPostCallback onGetGridTimeSpanSeriesSegmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeSeriesAtlevelDelegate;
        
        private EndOperationDelegate onEndGetTimeSeriesAtlevelDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeSeriesAtlevelCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeSeriesDefinitionDelegate;
        
        private EndOperationDelegate onEndGetTimeSeriesDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeSeriesDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeSeriesDelegate;
        
        private EndOperationDelegate onEndGetTimeSeriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeSeriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRainDataDelegate;
        
        private EndOperationDelegate onEndGetRainDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetRainDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCrossSectionDelegate;
        
        private EndOperationDelegate onEndGetCrossSectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetCrossSectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSensorDelegate;
        
        private EndOperationDelegate onEndGetSensorDelegate;
        
        private System.Threading.SendOrPostCallback onGetSensorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetShapesDelegate;
        
        private EndOperationDelegate onEndGetShapesDelegate;
        
        private System.Threading.SendOrPostCallback onGetShapesCompletedDelegate;
        
        public LoggerDataClient() {
        }
        
        public LoggerDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggerDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggerDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggerDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetHeightCompletedEventArgs> GetHeightCompleted;
        
        public event System.EventHandler<PostNumberBoundaryCompletedEventArgs> PostNumberBoundaryCompleted;
        
        public event System.EventHandler<GetStationsFromOrbiconCompletedEventArgs> GetStationsFromOrbiconCompleted;
        
        public event System.EventHandler<GetConfigCompletedEventArgs> GetConfigCompleted;
        
        public event System.EventHandler<GetStationCompletedEventArgs> GetStationCompleted;
        
        public event System.EventHandler<GetTimeSpanSeriesDefinitionCompletedEventArgs> GetTimeSpanSeriesDefinitionCompleted;
        
        public event System.EventHandler<GetTimeSpanSeriesSegmentCompletedEventArgs> GetTimeSpanSeriesSegmentCompleted;
        
        public event System.EventHandler<GetGridBlockCompletedEventArgs> GetGridBlockCompleted;
        
        public event System.EventHandler<GetGridTimeSpanSeriesDefinitionCompletedEventArgs> GetGridTimeSpanSeriesDefinitionCompleted;
        
        public event System.EventHandler<GetGridTimeSpanSeriesSegmentCompletedEventArgs> GetGridTimeSpanSeriesSegmentCompleted;
        
        public event System.EventHandler<GetTimeSeriesAtlevelCompletedEventArgs> GetTimeSeriesAtlevelCompleted;
        
        public event System.EventHandler<GetTimeSeriesDefinitionCompletedEventArgs> GetTimeSeriesDefinitionCompleted;
        
        public event System.EventHandler<GetTimeSeriesCompletedEventArgs> GetTimeSeriesCompleted;
        
        public event System.EventHandler<GetRainDataCompletedEventArgs> GetRainDataCompleted;
        
        public event System.EventHandler<GetCrossSectionCompletedEventArgs> GetCrossSectionCompleted;
        
        public event System.EventHandler<GetSensorCompletedEventArgs> GetSensorCompleted;
        
        public event System.EventHandler<GetShapesCompletedEventArgs> GetShapesCompleted;
        
        public System.Nullable<double> GetHeight(double Latitude, double Longitude) {
            return base.Channel.GetHeight(Latitude, Longitude);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetHeight(double Latitude, double Longitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHeight(Latitude, Longitude, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Nullable<double> EndGetHeight(System.IAsyncResult result) {
            return base.Channel.EndGetHeight(result);
        }
        
        private System.IAsyncResult OnBeginGetHeight(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double Latitude = ((double)(inValues[0]));
            double Longitude = ((double)(inValues[1]));
            return this.BeginGetHeight(Latitude, Longitude, callback, asyncState);
        }
        
        private object[] OnEndGetHeight(System.IAsyncResult result) {
            System.Nullable<double> retVal = this.EndGetHeight(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHeightCompleted(object state) {
            if ((this.GetHeightCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHeightCompleted(this, new GetHeightCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHeightAsync(double Latitude, double Longitude) {
            this.GetHeightAsync(Latitude, Longitude, null);
        }
        
        public void GetHeightAsync(double Latitude, double Longitude, object userState) {
            if ((this.onBeginGetHeightDelegate == null)) {
                this.onBeginGetHeightDelegate = new BeginOperationDelegate(this.OnBeginGetHeight);
            }
            if ((this.onEndGetHeightDelegate == null)) {
                this.onEndGetHeightDelegate = new EndOperationDelegate(this.OnEndGetHeight);
            }
            if ((this.onGetHeightCompletedDelegate == null)) {
                this.onGetHeightCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHeightCompleted);
            }
            base.InvokeAsync(this.onBeginGetHeightDelegate, new object[] {
                        Latitude,
                        Longitude}, this.onEndGetHeightDelegate, this.onGetHeightCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] PostNumberBoundary(int PostalNumber) {
            return base.Channel.PostNumberBoundary(PostalNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPostNumberBoundary(int PostalNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostNumberBoundary(PostalNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] EndPostNumberBoundary(System.IAsyncResult result) {
            return base.Channel.EndPostNumberBoundary(result);
        }
        
        private System.IAsyncResult OnBeginPostNumberBoundary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PostalNumber = ((int)(inValues[0]));
            return this.BeginPostNumberBoundary(PostalNumber, callback, asyncState);
        }
        
        private object[] OnEndPostNumberBoundary(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.Coordinate[] retVal = this.EndPostNumberBoundary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostNumberBoundaryCompleted(object state) {
            if ((this.PostNumberBoundaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostNumberBoundaryCompleted(this, new PostNumberBoundaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostNumberBoundaryAsync(int PostalNumber) {
            this.PostNumberBoundaryAsync(PostalNumber, null);
        }
        
        public void PostNumberBoundaryAsync(int PostalNumber, object userState) {
            if ((this.onBeginPostNumberBoundaryDelegate == null)) {
                this.onBeginPostNumberBoundaryDelegate = new BeginOperationDelegate(this.OnBeginPostNumberBoundary);
            }
            if ((this.onEndPostNumberBoundaryDelegate == null)) {
                this.onEndPostNumberBoundaryDelegate = new EndOperationDelegate(this.OnEndPostNumberBoundary);
            }
            if ((this.onPostNumberBoundaryCompletedDelegate == null)) {
                this.onPostNumberBoundaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostNumberBoundaryCompleted);
            }
            base.InvokeAsync(this.onBeginPostNumberBoundaryDelegate, new object[] {
                        PostalNumber}, this.onEndPostNumberBoundaryDelegate, this.onPostNumberBoundaryCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] GetStationsFromOrbicon() {
            return base.Channel.GetStationsFromOrbicon();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStationsFromOrbicon(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStationsFromOrbicon(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] EndGetStationsFromOrbicon(System.IAsyncResult result) {
            return base.Channel.EndGetStationsFromOrbicon(result);
        }
        
        private System.IAsyncResult OnBeginGetStationsFromOrbicon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetStationsFromOrbicon(callback, asyncState);
        }
        
        private object[] OnEndGetStationsFromOrbicon(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.Station[] retVal = this.EndGetStationsFromOrbicon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStationsFromOrbiconCompleted(object state) {
            if ((this.GetStationsFromOrbiconCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStationsFromOrbiconCompleted(this, new GetStationsFromOrbiconCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStationsFromOrbiconAsync() {
            this.GetStationsFromOrbiconAsync(null);
        }
        
        public void GetStationsFromOrbiconAsync(object userState) {
            if ((this.onBeginGetStationsFromOrbiconDelegate == null)) {
                this.onBeginGetStationsFromOrbiconDelegate = new BeginOperationDelegate(this.OnBeginGetStationsFromOrbicon);
            }
            if ((this.onEndGetStationsFromOrbiconDelegate == null)) {
                this.onEndGetStationsFromOrbiconDelegate = new EndOperationDelegate(this.OnEndGetStationsFromOrbicon);
            }
            if ((this.onGetStationsFromOrbiconCompletedDelegate == null)) {
                this.onGetStationsFromOrbiconCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStationsFromOrbiconCompleted);
            }
            base.InvokeAsync(this.onBeginGetStationsFromOrbiconDelegate, null, this.onEndGetStationsFromOrbiconDelegate, this.onGetStationsFromOrbiconCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig GetConfig(int PageNumber) {
            return base.Channel.GetConfig(PageNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfig(int PageNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfig(PageNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig EndGetConfig(System.IAsyncResult result) {
            return base.Channel.EndGetConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PageNumber = ((int)(inValues[0]));
            return this.BeginGetConfig(PageNumber, callback, asyncState);
        }
        
        private object[] OnEndGetConfig(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.LoggerPageConfig retVal = this.EndGetConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigCompleted(object state) {
            if ((this.GetConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigCompleted(this, new GetConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigAsync(int PageNumber) {
            this.GetConfigAsync(PageNumber, null);
        }
        
        public void GetConfigAsync(int PageNumber, object userState) {
            if ((this.onBeginGetConfigDelegate == null)) {
                this.onBeginGetConfigDelegate = new BeginOperationDelegate(this.OnBeginGetConfig);
            }
            if ((this.onEndGetConfigDelegate == null)) {
                this.onEndGetConfigDelegate = new EndOperationDelegate(this.OnEndGetConfig);
            }
            if ((this.onGetConfigCompletedDelegate == null)) {
                this.onGetConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigDelegate, new object[] {
                        PageNumber}, this.onEndGetConfigDelegate, this.onGetConfigCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station GetStation(int id) {
            return base.Channel.GetStation(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStation(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStation(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Station EndGetStation(System.IAsyncResult result) {
            return base.Channel.EndGetStation(result);
        }
        
        private System.IAsyncResult OnBeginGetStation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetStation(id, callback, asyncState);
        }
        
        private object[] OnEndGetStation(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.Station retVal = this.EndGetStation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStationCompleted(object state) {
            if ((this.GetStationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStationCompleted(this, new GetStationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStationAsync(int id) {
            this.GetStationAsync(id, null);
        }
        
        public void GetStationAsync(int id, object userState) {
            if ((this.onBeginGetStationDelegate == null)) {
                this.onBeginGetStationDelegate = new BeginOperationDelegate(this.OnBeginGetStation);
            }
            if ((this.onEndGetStationDelegate == null)) {
                this.onEndGetStationDelegate = new EndOperationDelegate(this.OnEndGetStation);
            }
            if ((this.onGetStationCompletedDelegate == null)) {
                this.onGetStationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStationCompleted);
            }
            base.InvokeAsync(this.onBeginGetStationDelegate, new object[] {
                        id}, this.onEndGetStationDelegate, this.onGetStationCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> GetTimeSpanSeriesDefinition(int sensorid) {
            return base.Channel.GetTimeSpanSeriesDefinition(sensorid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTimeSpanSeriesDefinition(int sensorid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeSpanSeriesDefinition(sensorid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> EndGetTimeSpanSeriesDefinition(System.IAsyncResult result) {
            return base.Channel.EndGetTimeSpanSeriesDefinition(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeSpanSeriesDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sensorid = ((int)(inValues[0]));
            return this.BeginGetTimeSpanSeriesDefinition(sensorid, callback, asyncState);
        }
        
        private object[] OnEndGetTimeSpanSeriesDefinition(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> retVal = this.EndGetTimeSpanSeriesDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeSpanSeriesDefinitionCompleted(object state) {
            if ((this.GetTimeSpanSeriesDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeSpanSeriesDefinitionCompleted(this, new GetTimeSpanSeriesDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeSpanSeriesDefinitionAsync(int sensorid) {
            this.GetTimeSpanSeriesDefinitionAsync(sensorid, null);
        }
        
        public void GetTimeSpanSeriesDefinitionAsync(int sensorid, object userState) {
            if ((this.onBeginGetTimeSpanSeriesDefinitionDelegate == null)) {
                this.onBeginGetTimeSpanSeriesDefinitionDelegate = new BeginOperationDelegate(this.OnBeginGetTimeSpanSeriesDefinition);
            }
            if ((this.onEndGetTimeSpanSeriesDefinitionDelegate == null)) {
                this.onEndGetTimeSpanSeriesDefinitionDelegate = new EndOperationDelegate(this.OnEndGetTimeSpanSeriesDefinition);
            }
            if ((this.onGetTimeSpanSeriesDefinitionCompletedDelegate == null)) {
                this.onGetTimeSpanSeriesDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeSpanSeriesDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeSpanSeriesDefinitionDelegate, new object[] {
                        sensorid}, this.onEndGetTimeSpanSeriesDefinitionDelegate, this.onGetTimeSpanSeriesDefinitionCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetTimeSpanSeriesSegment(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment) {
            return base.Channel.GetTimeSpanSeriesSegment(UniqueSensorID, segment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTimeSpanSeriesSegment(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeSpanSeriesSegment(UniqueSensorID, segment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetTimeSpanSeriesSegment(System.IAsyncResult result) {
            return base.Channel.EndGetTimeSpanSeriesSegment(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeSpanSeriesSegment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UniqueSensorID = ((int)(inValues[0]));
            HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment = ((HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan)(inValues[1]));
            return this.BeginGetTimeSpanSeriesSegment(UniqueSensorID, segment, callback, asyncState);
        }
        
        private object[] OnEndGetTimeSpanSeriesSegment(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] retVal = this.EndGetTimeSpanSeriesSegment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeSpanSeriesSegmentCompleted(object state) {
            if ((this.GetTimeSpanSeriesSegmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeSpanSeriesSegmentCompleted(this, new GetTimeSpanSeriesSegmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeSpanSeriesSegmentAsync(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment) {
            this.GetTimeSpanSeriesSegmentAsync(UniqueSensorID, segment, null);
        }
        
        public void GetTimeSpanSeriesSegmentAsync(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, object userState) {
            if ((this.onBeginGetTimeSpanSeriesSegmentDelegate == null)) {
                this.onBeginGetTimeSpanSeriesSegmentDelegate = new BeginOperationDelegate(this.OnBeginGetTimeSpanSeriesSegment);
            }
            if ((this.onEndGetTimeSpanSeriesSegmentDelegate == null)) {
                this.onEndGetTimeSpanSeriesSegmentDelegate = new EndOperationDelegate(this.OnEndGetTimeSpanSeriesSegment);
            }
            if ((this.onGetTimeSpanSeriesSegmentCompletedDelegate == null)) {
                this.onGetTimeSpanSeriesSegmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeSpanSeriesSegmentCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeSpanSeriesSegmentDelegate, new object[] {
                        UniqueSensorID,
                        segment}, this.onEndGetTimeSpanSeriesSegmentDelegate, this.onGetTimeSpanSeriesSegmentCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon GetGridBlock(int GridBlockId) {
            return base.Channel.GetGridBlock(GridBlockId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGridBlock(int GridBlockId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGridBlock(GridBlockId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon EndGetGridBlock(System.IAsyncResult result) {
            return base.Channel.EndGetGridBlock(result);
        }
        
        private System.IAsyncResult OnBeginGetGridBlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int GridBlockId = ((int)(inValues[0]));
            return this.BeginGetGridBlock(GridBlockId, callback, asyncState);
        }
        
        private object[] OnEndGetGridBlock(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.Polygon retVal = this.EndGetGridBlock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGridBlockCompleted(object state) {
            if ((this.GetGridBlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGridBlockCompleted(this, new GetGridBlockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGridBlockAsync(int GridBlockId) {
            this.GetGridBlockAsync(GridBlockId, null);
        }
        
        public void GetGridBlockAsync(int GridBlockId, object userState) {
            if ((this.onBeginGetGridBlockDelegate == null)) {
                this.onBeginGetGridBlockDelegate = new BeginOperationDelegate(this.OnBeginGetGridBlock);
            }
            if ((this.onEndGetGridBlockDelegate == null)) {
                this.onEndGetGridBlockDelegate = new EndOperationDelegate(this.OnEndGetGridBlock);
            }
            if ((this.onGetGridBlockCompletedDelegate == null)) {
                this.onGetGridBlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGridBlockCompleted);
            }
            base.InvokeAsync(this.onBeginGetGridBlockDelegate, new object[] {
                        GridBlockId}, this.onEndGetGridBlockDelegate, this.onGetGridBlockCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> GetGridTimeSpanSeriesDefinition(int gridid, int gridblockid) {
            return base.Channel.GetGridTimeSpanSeriesDefinition(gridid, gridblockid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGridTimeSpanSeriesDefinition(int gridid, int gridblockid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGridTimeSpanSeriesDefinition(gridid, gridblockid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> EndGetGridTimeSpanSeriesDefinition(System.IAsyncResult result) {
            return base.Channel.EndGetGridTimeSpanSeriesDefinition(result);
        }
        
        private System.IAsyncResult OnBeginGetGridTimeSpanSeriesDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int gridid = ((int)(inValues[0]));
            int gridblockid = ((int)(inValues[1]));
            return this.BeginGetGridTimeSpanSeriesDefinition(gridid, gridblockid, callback, asyncState);
        }
        
        private object[] OnEndGetGridTimeSpanSeriesDefinition(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan[]> retVal = this.EndGetGridTimeSpanSeriesDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGridTimeSpanSeriesDefinitionCompleted(object state) {
            if ((this.GetGridTimeSpanSeriesDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGridTimeSpanSeriesDefinitionCompleted(this, new GetGridTimeSpanSeriesDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGridTimeSpanSeriesDefinitionAsync(int gridid, int gridblockid) {
            this.GetGridTimeSpanSeriesDefinitionAsync(gridid, gridblockid, null);
        }
        
        public void GetGridTimeSpanSeriesDefinitionAsync(int gridid, int gridblockid, object userState) {
            if ((this.onBeginGetGridTimeSpanSeriesDefinitionDelegate == null)) {
                this.onBeginGetGridTimeSpanSeriesDefinitionDelegate = new BeginOperationDelegate(this.OnBeginGetGridTimeSpanSeriesDefinition);
            }
            if ((this.onEndGetGridTimeSpanSeriesDefinitionDelegate == null)) {
                this.onEndGetGridTimeSpanSeriesDefinitionDelegate = new EndOperationDelegate(this.OnEndGetGridTimeSpanSeriesDefinition);
            }
            if ((this.onGetGridTimeSpanSeriesDefinitionCompletedDelegate == null)) {
                this.onGetGridTimeSpanSeriesDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGridTimeSpanSeriesDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginGetGridTimeSpanSeriesDefinitionDelegate, new object[] {
                        gridid,
                        gridblockid}, this.onEndGetGridTimeSpanSeriesDefinitionDelegate, this.onGetGridTimeSpanSeriesDefinitionCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetGridTimeSpanSeriesSegment(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment) {
            return base.Channel.GetGridTimeSpanSeriesSegment(gridid, gridblockid, segment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGridTimeSpanSeriesSegment(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGridTimeSpanSeriesSegment(gridid, gridblockid, segment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetGridTimeSpanSeriesSegment(System.IAsyncResult result) {
            return base.Channel.EndGetGridTimeSpanSeriesSegment(result);
        }
        
        private System.IAsyncResult OnBeginGetGridTimeSpanSeriesSegment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int gridid = ((int)(inValues[0]));
            int gridblockid = ((int)(inValues[1]));
            HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment = ((HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan)(inValues[2]));
            return this.BeginGetGridTimeSpanSeriesSegment(gridid, gridblockid, segment, callback, asyncState);
        }
        
        private object[] OnEndGetGridTimeSpanSeriesSegment(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] retVal = this.EndGetGridTimeSpanSeriesSegment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGridTimeSpanSeriesSegmentCompleted(object state) {
            if ((this.GetGridTimeSpanSeriesSegmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGridTimeSpanSeriesSegmentCompleted(this, new GetGridTimeSpanSeriesSegmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGridTimeSpanSeriesSegmentAsync(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment) {
            this.GetGridTimeSpanSeriesSegmentAsync(gridid, gridblockid, segment, null);
        }
        
        public void GetGridTimeSpanSeriesSegmentAsync(int gridid, int gridblockid, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegmentSpan segment, object userState) {
            if ((this.onBeginGetGridTimeSpanSeriesSegmentDelegate == null)) {
                this.onBeginGetGridTimeSpanSeriesSegmentDelegate = new BeginOperationDelegate(this.OnBeginGetGridTimeSpanSeriesSegment);
            }
            if ((this.onEndGetGridTimeSpanSeriesSegmentDelegate == null)) {
                this.onEndGetGridTimeSpanSeriesSegmentDelegate = new EndOperationDelegate(this.OnEndGetGridTimeSpanSeriesSegment);
            }
            if ((this.onGetGridTimeSpanSeriesSegmentCompletedDelegate == null)) {
                this.onGetGridTimeSpanSeriesSegmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGridTimeSpanSeriesSegmentCompleted);
            }
            base.InvokeAsync(this.onBeginGetGridTimeSpanSeriesSegmentDelegate, new object[] {
                        gridid,
                        gridblockid,
                        segment}, this.onEndGetGridTimeSpanSeriesSegmentDelegate, this.onGetGridTimeSpanSeriesSegmentCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] GetTimeSeriesAtlevel(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment) {
            return base.Channel.GetTimeSeriesAtlevel(UniqueSensorID, segment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTimeSeriesAtlevel(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeSeriesAtlevel(UniqueSensorID, segment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] EndGetTimeSeriesAtlevel(System.IAsyncResult result) {
            return base.Channel.EndGetTimeSeriesAtlevel(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeSeriesAtlevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UniqueSensorID = ((int)(inValues[0]));
            HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment = ((HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment)(inValues[1]));
            return this.BeginGetTimeSeriesAtlevel(UniqueSensorID, segment, callback, asyncState);
        }
        
        private object[] OnEndGetTimeSeriesAtlevel(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] retVal = this.EndGetTimeSeriesAtlevel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeSeriesAtlevelCompleted(object state) {
            if ((this.GetTimeSeriesAtlevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeSeriesAtlevelCompleted(this, new GetTimeSeriesAtlevelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeSeriesAtlevelAsync(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment) {
            this.GetTimeSeriesAtlevelAsync(UniqueSensorID, segment, null);
        }
        
        public void GetTimeSeriesAtlevelAsync(int UniqueSensorID, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment segment, object userState) {
            if ((this.onBeginGetTimeSeriesAtlevelDelegate == null)) {
                this.onBeginGetTimeSeriesAtlevelDelegate = new BeginOperationDelegate(this.OnBeginGetTimeSeriesAtlevel);
            }
            if ((this.onEndGetTimeSeriesAtlevelDelegate == null)) {
                this.onEndGetTimeSeriesAtlevelDelegate = new EndOperationDelegate(this.OnEndGetTimeSeriesAtlevel);
            }
            if ((this.onGetTimeSeriesAtlevelCompletedDelegate == null)) {
                this.onGetTimeSeriesAtlevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeSeriesAtlevelCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeSeriesAtlevelDelegate, new object[] {
                        UniqueSensorID,
                        segment}, this.onEndGetTimeSeriesAtlevelDelegate, this.onGetTimeSeriesAtlevelCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> GetTimeSeriesDefinition(int sensorid) {
            return base.Channel.GetTimeSeriesDefinition(sensorid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTimeSeriesDefinition(int sensorid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeSeriesDefinition(sensorid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> EndGetTimeSeriesDefinition(System.IAsyncResult result) {
            return base.Channel.EndGetTimeSeriesDefinition(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeSeriesDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sensorid = ((int)(inValues[0]));
            return this.BeginGetTimeSeriesDefinition(sensorid, callback, asyncState);
        }
        
        private object[] OnEndGetTimeSeriesDefinition(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, HydroNumerics.MikeSheTools.Mike11View.Logger.DataSegment>> retVal = this.EndGetTimeSeriesDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeSeriesDefinitionCompleted(object state) {
            if ((this.GetTimeSeriesDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeSeriesDefinitionCompleted(this, new GetTimeSeriesDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeSeriesDefinitionAsync(int sensorid) {
            this.GetTimeSeriesDefinitionAsync(sensorid, null);
        }
        
        public void GetTimeSeriesDefinitionAsync(int sensorid, object userState) {
            if ((this.onBeginGetTimeSeriesDefinitionDelegate == null)) {
                this.onBeginGetTimeSeriesDefinitionDelegate = new BeginOperationDelegate(this.OnBeginGetTimeSeriesDefinition);
            }
            if ((this.onEndGetTimeSeriesDefinitionDelegate == null)) {
                this.onEndGetTimeSeriesDefinitionDelegate = new EndOperationDelegate(this.OnEndGetTimeSeriesDefinition);
            }
            if ((this.onGetTimeSeriesDefinitionCompletedDelegate == null)) {
                this.onGetTimeSeriesDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeSeriesDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeSeriesDefinitionDelegate, new object[] {
                        sensorid}, this.onEndGetTimeSeriesDefinitionDelegate, this.onGetTimeSeriesDefinitionCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] GetTimeSeries(int UniqueSensorid, int NumberOfDecimals) {
            return base.Channel.GetTimeSeries(UniqueSensorid, NumberOfDecimals);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTimeSeries(int UniqueSensorid, int NumberOfDecimals, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeSeries(UniqueSensorid, NumberOfDecimals, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] EndGetTimeSeries(System.IAsyncResult result) {
            return base.Channel.EndGetTimeSeries(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeSeries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UniqueSensorid = ((int)(inValues[0]));
            int NumberOfDecimals = ((int)(inValues[1]));
            return this.BeginGetTimeSeries(UniqueSensorid, NumberOfDecimals, callback, asyncState);
        }
        
        private object[] OnEndGetTimeSeries(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.TimeStampValue[] retVal = this.EndGetTimeSeries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeSeriesCompleted(object state) {
            if ((this.GetTimeSeriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeSeriesCompleted(this, new GetTimeSeriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeSeriesAsync(int UniqueSensorid, int NumberOfDecimals) {
            this.GetTimeSeriesAsync(UniqueSensorid, NumberOfDecimals, null);
        }
        
        public void GetTimeSeriesAsync(int UniqueSensorid, int NumberOfDecimals, object userState) {
            if ((this.onBeginGetTimeSeriesDelegate == null)) {
                this.onBeginGetTimeSeriesDelegate = new BeginOperationDelegate(this.OnBeginGetTimeSeries);
            }
            if ((this.onEndGetTimeSeriesDelegate == null)) {
                this.onEndGetTimeSeriesDelegate = new EndOperationDelegate(this.OnEndGetTimeSeries);
            }
            if ((this.onGetTimeSeriesCompletedDelegate == null)) {
                this.onGetTimeSeriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeSeriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeSeriesDelegate, new object[] {
                        UniqueSensorid,
                        NumberOfDecimals}, this.onEndGetTimeSeriesDelegate, this.onGetTimeSeriesCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] GetRainData(int UniqueSensorID) {
            return base.Channel.GetRainData(UniqueSensorID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRainData(int UniqueSensorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRainData(UniqueSensorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] EndGetRainData(System.IAsyncResult result) {
            return base.Channel.EndGetRainData(result);
        }
        
        private System.IAsyncResult OnBeginGetRainData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UniqueSensorID = ((int)(inValues[0]));
            return this.BeginGetRainData(UniqueSensorID, callback, asyncState);
        }
        
        private object[] OnEndGetRainData(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.TimeSpanValue[] retVal = this.EndGetRainData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRainDataCompleted(object state) {
            if ((this.GetRainDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRainDataCompleted(this, new GetRainDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRainDataAsync(int UniqueSensorID) {
            this.GetRainDataAsync(UniqueSensorID, null);
        }
        
        public void GetRainDataAsync(int UniqueSensorID, object userState) {
            if ((this.onBeginGetRainDataDelegate == null)) {
                this.onBeginGetRainDataDelegate = new BeginOperationDelegate(this.OnBeginGetRainData);
            }
            if ((this.onEndGetRainDataDelegate == null)) {
                this.onEndGetRainDataDelegate = new EndOperationDelegate(this.OnEndGetRainData);
            }
            if ((this.onGetRainDataCompletedDelegate == null)) {
                this.onGetRainDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRainDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetRainDataDelegate, new object[] {
                        UniqueSensorID}, this.onEndGetRainDataDelegate, this.onGetRainDataCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection GetCrossSection(int id) {
            return base.Channel.GetCrossSection(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCrossSection(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCrossSection(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection EndGetCrossSection(System.IAsyncResult result) {
            return base.Channel.EndGetCrossSection(result);
        }
        
        private System.IAsyncResult OnBeginGetCrossSection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetCrossSection(id, callback, asyncState);
        }
        
        private object[] OnEndGetCrossSection(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.CrossSection retVal = this.EndGetCrossSection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCrossSectionCompleted(object state) {
            if ((this.GetCrossSectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCrossSectionCompleted(this, new GetCrossSectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCrossSectionAsync(int id) {
            this.GetCrossSectionAsync(id, null);
        }
        
        public void GetCrossSectionAsync(int id, object userState) {
            if ((this.onBeginGetCrossSectionDelegate == null)) {
                this.onBeginGetCrossSectionDelegate = new BeginOperationDelegate(this.OnBeginGetCrossSection);
            }
            if ((this.onEndGetCrossSectionDelegate == null)) {
                this.onEndGetCrossSectionDelegate = new EndOperationDelegate(this.OnEndGetCrossSection);
            }
            if ((this.onGetCrossSectionCompletedDelegate == null)) {
                this.onGetCrossSectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCrossSectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetCrossSectionDelegate, new object[] {
                        id}, this.onEndGetCrossSectionDelegate, this.onGetCrossSectionCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor GetSensor(int id) {
            return base.Channel.GetSensor(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSensor(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSensor(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor EndGetSensor(System.IAsyncResult result) {
            return base.Channel.EndGetSensor(result);
        }
        
        private System.IAsyncResult OnBeginGetSensor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetSensor(id, callback, asyncState);
        }
        
        private object[] OnEndGetSensor(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.Sensor retVal = this.EndGetSensor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSensorCompleted(object state) {
            if ((this.GetSensorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSensorCompleted(this, new GetSensorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSensorAsync(int id) {
            this.GetSensorAsync(id, null);
        }
        
        public void GetSensorAsync(int id, object userState) {
            if ((this.onBeginGetSensorDelegate == null)) {
                this.onBeginGetSensorDelegate = new BeginOperationDelegate(this.OnBeginGetSensor);
            }
            if ((this.onEndGetSensorDelegate == null)) {
                this.onEndGetSensorDelegate = new EndOperationDelegate(this.OnEndGetSensor);
            }
            if ((this.onGetSensorCompletedDelegate == null)) {
                this.onGetSensorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSensorCompleted);
            }
            base.InvokeAsync(this.onBeginGetSensorDelegate, new object[] {
                        id}, this.onEndGetSensorDelegate, this.onGetSensorCompletedDelegate, userState);
        }
        
        public HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile GetShapes(int shapefileid) {
            return base.Channel.GetShapes(shapefileid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetShapes(int shapefileid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetShapes(shapefileid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile EndGetShapes(System.IAsyncResult result) {
            return base.Channel.EndGetShapes(result);
        }
        
        private System.IAsyncResult OnBeginGetShapes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int shapefileid = ((int)(inValues[0]));
            return this.BeginGetShapes(shapefileid, callback, asyncState);
        }
        
        private object[] OnEndGetShapes(System.IAsyncResult result) {
            HydroNumerics.MikeSheTools.Mike11View.Logger.ShapeFile retVal = this.EndGetShapes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetShapesCompleted(object state) {
            if ((this.GetShapesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetShapesCompleted(this, new GetShapesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetShapesAsync(int shapefileid) {
            this.GetShapesAsync(shapefileid, null);
        }
        
        public void GetShapesAsync(int shapefileid, object userState) {
            if ((this.onBeginGetShapesDelegate == null)) {
                this.onBeginGetShapesDelegate = new BeginOperationDelegate(this.OnBeginGetShapes);
            }
            if ((this.onEndGetShapesDelegate == null)) {
                this.onEndGetShapesDelegate = new EndOperationDelegate(this.OnEndGetShapes);
            }
            if ((this.onGetShapesCompletedDelegate == null)) {
                this.onGetShapesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetShapesCompleted);
            }
            base.InvokeAsync(this.onBeginGetShapesDelegate, new object[] {
                        shapefileid}, this.onEndGetShapesDelegate, this.onGetShapesCompletedDelegate, userState);
        }
    }
}
